app=httr::oauth_app(
appname="Class management",
key="02df56bc561d2c62aa5f",
secret="b94678c95157f22e381e1b13fe7e6ab8c208cdc7",
redirect_uri = httr::oauth_callback()
)
) -> .token
set_githubScopes <- function(){
c(
"repo"
)
}
set_githubScopes <- function(){
c(
"repo"
)
}
httr::oauth2.0_token(
endpoint=httr::oauth_endpoints("github"),
app=httr::oauth_app(
appname="Class management",
key="02df56bc561d2c62aa5f",
secret="b94678c95157f22e381e1b13fe7e6ab8c208cdc7",
redirect_uri = httr::oauth_callback()
),
scope = set_githubScopes()
) -> .token
postingMessage="GET /user"
split_postingMessage=stringr::str_split(postingMessage,"\\s")
split_postingMessage
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB
path
load("~/Github/gitterhub/R/sysdata.rda")
rootEndpoints <- function(platformName){
switch(
platformName,
"github"="https://api.github.com",
"gitter"="https://api.gitter.im"
)
}
rootEndpoints("gitter")
github_apiFunctional <- function(postingMessage){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
content(response)
}
}
github_oauth <- function(){
httr::oauth2.0_token(
endpoint=httr::oauth_endpoints("github"),
app=httr::oauth_app(
appname="Class management",
key="02df56bc561d2c62aa5f",
secret="b94678c95157f22e381e1b13fe7e6ab8c208cdc7",
redirect_uri = httr::oauth_callback()
),
scope = set_githubScopes()
)
}
github_oauth()
.token <- github_oauth()
get_user <- function(){
postingMessage="GET /user"
github_apiFunctional(postingMessage)
}
list(
get_userProfile=get_user()
)
get_userProfile=get_user()
get_user()
get_user <- github_apiFunctional("GET /user")
get_user()
list(
get_userInfo=get_user()
)
list_reposOfAUser <- function(username){
github_apiFunctional(
glue::glue("GET /users/{username}/repos"))
}
list_reposOfAUser('tpemartin')
list_reposOfAUser <- function(username){
requestFun <- github_apiFunctional(
glue::glue("GET /users/{username}/repos"))
requestFun()
}
list_reposOfAUser('tpemartin')
myRepos <- list_reposOfAUser('tpemartin')
View(myRepos)
github_apiFunctional <- function(postingMessage, .token){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
reponse
#content(response)
}
}
myRepos <- list_reposOfAUser('tpemartin')
github_apiFunctional <- function(postingMessage, .token){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
response
#content(response)
}
}
myRepos <- list_reposOfAUser('tpemartin')
View(myRepos)
github_apiFunctionalOnePage <- function(postingMessage, .token){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
# response
content(response)
}
}
github_apiFunctionalOnePage <- function(postingMessage, .token){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
# response
content(response)
}
}
github_apiFunctionalOnePage <- function(postingMessage, .token){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
# response
content(response)
}
}
get_user <- github_apiFunctionalOnePage("GET /user")
list_reposOfAUser <- function(username){
requestFun <- github_apiFunctionalOnePage(
glue::glue("GET /users/{username}/repos"))
requestFun()
}
myRepos <- list_reposOfAUser('tpemartin')
append(myRepos, myRepos) -> bigRepos
get_multiplePage <- function(apiFun){
allpages <- newpage <- apiFun()
count=0; max_count=30
while(length(newpage)==30 && count < max_count){
count=count+1
newpage=apiFun()
allpages <- append(allpages, newpage)
}
allpages
}
list_reposOfAUser_apiFun <- function(username){
requestFun <- github_apiFunctionalOnePage(
glue::glue("GET /users/{username}/repos"))
requestFun
}
apiFun <- list_reposOfAUser_apiFun('tpemartin')
apiFun()
get_multiplePages <- function(apiFun){
allpages <- newpage <- apiFun()
count=0; max_count=30
while(length(newpage)==30 && count < max_count){
count=count+1
newpage=apiFun()
allpages <- append(allpages, newpage)
}
allpages
}
list_reposOfAUser <- function(username){
apiFun <- list_reposOfAUser_apiFun(username)
get_multiplePages(apiFun)
}
list_reposOfAUser('tpemartin') -> myrepos
username <- "tpemartin"
apiFun <- list_reposOfAUser_apiFun(username)
apiFun(query=list(page=1, per_page=100))-> firstPage
View(firstPage)
apiFun(query=list(page=2, per_page=100))-> Page2
get_multiplePages <- function(apiFun){
allpages <- newpage <- apiFun()
count=0; max_count=30
while(length(newpage)==100 && count < max_count){
count=count+1
newpage=apiFun(
query=list(
page=count,
per_page=100
)
)
allpages <- append(allpages, newpage)
}
allpages
}
list_reposOfAUser <- function(username){
username <- "tpemartin"
apiFun <- list_reposOfAUser_apiFun(username)
get_multiplePages(apiFun)
}
list_reposOfAUser <- function(username){
#username <- "tpemartin"
apiFun <- list_reposOfAUser_apiFun(username)
get_multiplePages(apiFun)
}
list_reposOfAUser('tpemartin') -> myrepos
View(myrepos)
get_multiplePages <- function(apiFun){
allpages <- newpage <- apiFun()
count=0; max_count=30
while(length(newpage)==100 && count < max_count){
count=count+1
newpage=apiFun(
query=list(
page=count,
per_page=100
)
)
allpages <- append(allpages, newpage)
}
allpages
}
get_multiplePages <- function(apiFun){
allpages <- newpage <- apiFun(query=list(page=1, per_page=100))
count=0; max_count=30
while(length(newpage)==100 && count < max_count){
count=count+1
newpage=apiFun(
query=list(
page=count,
per_page=100
)
)
allpages <- append(allpages, newpage)
}
allpages
}
list_reposOfAUser <- function(username){
#username <- "tpemartin"
apiFun <- list_reposOfAUser_apiFun(username)
get_multiplePages(apiFun)
}
list_reposOfAUser('tpemartin') -> myrepos
View(myrepos)
get_multiplePages <- function(apiFun){
allpages <- newpage <- apiFun(query=list(page=1, per_page=100))
count=0; max_count=30
while(length(newpage)==100 && count < max_count){
count=count+1
newpage=apiFun(
query=list(
page=count+1,
per_page=100
)
)
allpages <- append(allpages, newpage)
}
allpages
}
list_reposOfAUser <- function(username){
#username <- "tpemartin"
apiFun <- list_reposOfAUser_apiFun(username)
get_multiplePages(apiFun)
}
list_reposOfAUser('tpemartin') -> myrepos
githubService <- function(){
list(
get_userInfo=get_user(),
get_allRepos=list_reposOfAUser
)
}
gs <- githubService()
gs$get_userInfo
gs$get_allRepos(username = "tpemartin")
get_repoInfo <- function(owner, repo){
requestFun <- github_apiFunctionalOnePage(
glue::glue("GET /repos/{owner}/{repo}")
)
requestFun()
}
get_repoInfo(owner="tpemartin","109-1-inclass-practice") -> repoInfo
repoInfo
View(repoInfo)
githubService <- function(){
list(
get_userInfo=get_user(),
get_allRepos=list_reposOfAUser,
get_oneRepoInfo=get_repoInfo
)
}
gs <- githubService()
gs$get_userInfo
gs$get_oneRepoInfo(owner = "tpemartin", repo="109-1-inclass-practice")
# GET /repos/:owner/:repo/forks
get_repoForks_apiFun <- function(owner, repo){
requestFun <- github_apiFunctionalOnePage(
glue::glue("GET /repos/{owner}/{repo}/forks")
)
requestFun
}
apiFun <- get_repoForks_apiFun(owner, repo)
owner="tpemartin"
repo="109-1-inclass-practice"
apiFun <- get_repoForks_apiFun(owner, repo)
get_repoForks <- function(owner, repo){
apiFun <- get_repoForks_apiFun(owner, repo)
get_multiplePages(apiFun)
}
forks <- get_repoForks(owner, repo)
View(forks)
githubService <- function(){
list(
get_userInfo=get_user(),
get_allRepos=list_reposOfAUser,
get_oneRepoInfo=get_repoInfo,
get_repoForks=get_repoForks
)
}
gs <- githubService()
gs$get_repoForks(owner = "tpemartin", repo="109-1-inclass-practice")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#' Define the root endpoint of api service
#'
#' @param platformName A character of "github", "gitter"
#'
#' @return endpoint url
#' @export
#'
#' @examples none
rootEndpoints <- function(platformName){
switch(
platformName,
"github"="https://api.github.com",
"gitter"="https://api.gitter.im"
)
}
devtools::document()
devtools::document()
library(gitterhub)
library(gitterhub)
gs <- githubService()
gs$get_userInfo
library(jsonlite)
base64_enc(c("a","b"))
filename="README.md"
content <- readLines(con=filename)
content
filecontent=jsonlite::base64_enc(content)
filecontent
requestFun <- gitter_apiFunctional(postingMessage)
requestFun <- github_apiFunctional(postingMessage)
requestFun <- github_apiFunctionalOnePage(postingMessage)
requestFun <- github_apiFunctionalOnePage(postingMessage)
github_apiFunctionalOnePage <- function(postingMessage){
split_postingMessage=stringr::str_split(postingMessage,"\\s")
VERB=split_postingMessage[[1]][[1]]
path=split_postingMessage[[1]][[2]]
VERB=as.name(VERB)
require("httr")
endpoint=gitterhub:::rootEndpoints("github")
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=endpoint,
path=path,
config=httr::config(token=github_oauth()),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
# response
content(response)
}
}
get_multiplePages <- function(apiFun){
allpages <- newpage <- apiFun(query=list(page=1, per_page=100))
count=0; max_count=30
while(length(newpage)==100 && count < max_count){
count=count+1
newpage=apiFun(
query=list(
page=count+1,
per_page=100
)
)
allpages <- append(allpages, newpage)
}
allpages
}
filename="README.md"
owner="tpemartin"
repo="109-1-inclass-practice"
path="hello.txt"
commitMessage="test"
postingMessage = glue::glue("PUT /repos/{owner}/{repo}/contents/{path}")
content <- readLines(con=filename)
filecontent=jsonlite::base64_enc(content)
body=list(
message=commitMessage,
content=filecontent
)
requestFun <- github_apiFunctionalOnePage(postingMessage)
requestFun(body=body)
source('~/Github/gitterhub/R/github.R', echo=TRUE)
postingMessage = glue::glue("PUT /repos/{owner}/{repo}/contents/{path}")
content <- readLines(con=filename)
filecontent=jsonlite::base64_enc(content)
body=list(
message=commitMessage,
content=filecontent
)
requestFun <- github_apiFunctionalOnePage(postingMessage)
requestFun(body=body)
requestFun(body=jsonlite::toJSON(body, auto_unbox = T))
require("httr")
library(gitterhub)
library(gitterhub)
q()
